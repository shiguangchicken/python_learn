	
	1.分数 ：  from fractions import Fraction    1/3  Fraction(1,3)

	2.排序： x=range(5)   sorted(x)   逆序：  sorted(x,reverse)

	3.枚举：enumerate()   

		list(enumerate('abcde'))   =>>>>[(0,'a'),(1,'b').....] 表示在给数组加上index

		x=range(10)
		for i in enumerate(x):
    		print(i,end='')
    	以上程序输出：(0, 0)(1, 1)(2, 2)(3, 3)(4, 4)(5, 5)(6, 6)(7, 7)(8, 8)(9, 9)

    	for i in enumerate(x,5):表示从下标为5开始(5, 0),(6, 1),(7, 2),(8, 3),(9, 4),(10, 5),(11, 6),(12, 7),(13, 8),(14, 9),

    4.迭代：iter() 用法：1. iter(iterable)   2.iter(callable,sentinel) 

    	1要求参数必须为序列，2会持续调用函数callable直至返回sentinel

    	next()函数用来返回可迭代对象的下一个元素。

		    	x=range(10)
				x=iter(x)
				print(next(x))

		使用next()时必须为iter对象

	5.map() :把一个函数func依次映射到序列或迭代器对象的每个元素上

		>>>list(map(str,range(5)))
		['0', '1', '2', '3', '4']

		>>>def add5(v):
			return v+5
		>>>lsit(map(add5,range(5)))
		[5, 6, 7, 8, 9]

	6.reduce(): 将一个接收2个参数的函数以迭代器累积的方式从左到右依次作用到一个序列或迭代器的所有元素上

		reduce(lambda x,y:x+y,[1,2,3,4,5]) 计算过程为：((((1+2)+3)+4)+5)
		其实质是，依次将后面的数组输入有2个参数的函数，返回值作为下一个x

	7.filter() 将一个参数的函数作用到一个序列上，返回该序列中使得该函数返回值为True的那些元素组成的对象

		>>>def func(x):
			return x.isalnum #判断是否为字母或数字
		>>>x=['1','a','2','&&','%s']
		>>>list(filter(func,x))
		['1', 'a', '2']

	8.range([start,]end[,step])

		返回具有惰性特点的range对象，包含[start,end)左闭右开区间的整数

	9.zip() :把多个序列中相同位置的元素都放到一个组上

		>>>list(zip(['a','b','c'],[1,2,3],['*','#','&']))
		[('a', 1, '*'), ('b', 2, '#'), ('c', 3, '&')]

	10.eval()计算字符串的值

		>>>eval(b'3+5)
		8				#返回字符串‘3+5’的值

		ord()返回单个字符的Unicode码
		chr()返回字符
		exec()执行指定的python源码

	11.list() 将可迭代对象转换为列表

		>>>list((3,8,2,7))
		[3,8,2,7]
			a={
		    'name':'fang',
		    'snum':129021,
		    'adress':'china'
			}
			print(list(a))    #['name', 'snum', 'adress']输出键
			print(list(a.items()))     #[('name', 'fang'), ('snum', 129021), ('adress', 'china')]输出键，值
			print(list(a.values()))    #['fang', 129021, 'china']输出值

		del删除列表

		>>>x=[1,2,3,4]
		>>>del x
		

